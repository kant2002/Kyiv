using System.Collections.Generic;
using static Kyiv.Конвертер;

namespace Kyiv;

public class Декомпілятор
{
    public static string Декомпілювати(string команда)
    {
        var лістінг = ПарсерЛістінга.ПрочитатиІзРядка(команда);
        return Декомпілювати(лістінг);
    }

    public static string Декомпілювати(Лістінг лістінг)
    {
        List<string> команди = new List<string>();
        List<int> точкиПереходу = new();
        foreach (var (лінія, адреса) in лістінг.ОдиниціКоду.SelectMany(ок => ок.Команди.Select((к, а) => (к, ок.ПочатковаАдреса + а))))
        {
            var команда = ПарсерКоманд.Розібрати(лінія);
            switch (команда.Код)
            {
                case КодОперації.СравнениеБезУчетаЗнаков:
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.СравнениеСУчетомЗнаков:
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.ТочноеСравнение:
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.ВыводКодов:
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.ЗаписьНаМагнитныйБарабанКодовИзЯчеекЗапоминающегоУстройств:
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.ЧтениеКодовСМагнитногоБарабанаВЯчейкиЗапоминающегоУстройства:
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.УсловныйПереходНаПодпрограмму:
                    точкиПереходу.Add(команда.Адреса2);
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.НачалоГрупповойОперации:
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.ОкончаниеГрупповойОперации:
                    точкиПереходу.Add(команда.Адреса2);
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                case КодОперації.УсловныйПереходПоЗнакуЧисла:
                    точкиПереходу.Add(команда.Адреса2);
                    точкиПереходу.Add(команда.Адреса3);
                    break;
                default:
                    break;
            }
        }

        foreach (var (лінія, адреса) in лістінг.ОдиниціКоду.SelectMany(ок => ок.Команди.Select((к, а) => (к, ок.ПочатковаАдреса + а))))
        {
            try
            {
                var мітка = точкиПереходу.Contains(адреса) ? new string[] { $"lbl_{До8РічноїАдреси(адреса)}:" } : [];
                команди.AddRange(мітка.Union(
                    ДоАссемблера(ПарсерКоманд.Розібрати(лінія), true).Select(ДоРядка)));
            }
            catch
            {
                команди.Add("// Невідома команда " + ПарсерКоманд.Сконвертувати(лінія));
            }
        }

        return string.Join(Environment.NewLine, команди);
    }
    private static string ДоРядка(Операція операція)
    {
        return string.Join(Environment.NewLine, операція.ToString().ReplaceLineEndings().Split(Environment.NewLine).Select(x => "    " + x));
    }

    private static IEnumerable<Операція> ДоАссемблера(СтруктураКоманди команда, bool html)
    {
        switch (команда.Код)
        {
            case КодОперації.Сложение:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.Додавання, команда);
                break;
            case КодОперації.Вычитание:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.Віднімання, команда);
                break;
            case КодОперації.СложениеКоманд:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.ДодаванняКоманд, команда);
                break;
            case КодОперації.СравнениеСУчетомЗнаков:
                yield return new УмовнаОперація(
                    new БінарнаОперація(ТипБінарноїОперації.МеншеЧиДорівнює,
                        ВідноснаПамять(команда.Адреса1),
                        ВідноснаПамять(команда.Адреса2)),
                    new Перехід(команда.Адреса3));
                break;
            case КодОперації.СравнениеБезУчетаЗнаков:
                yield return new УмовнаОперація(
                    new БінарнаОперація(ТипБінарноїОперації.МеншеЧиДорівнює,
                        new УнарнаОперація(ТипУнарноїОперації.Модуль, ВідноснаПамять(команда.Адреса1)),
                        new УнарнаОперація(ТипУнарноїОперації.Модуль, ВідноснаПамять(команда.Адреса2))),
                    new Перехід(команда.Адреса3));
                break;
            case КодОперації.ВычитаниеПоМодулю:
                yield return new ЗберіганняЗмінної(
                    ВідноснаПамять(команда.Адреса3),
                    new БінарнаОперація(ТипБінарноїОперації.Віднімання,
                        new УнарнаОперація(ТипУнарноїОперації.Модуль, ВідноснаПамять(команда.Адреса1)),
                        new УнарнаОперація(ТипУнарноїОперації.Модуль, ВідноснаПамять(команда.Адреса2))));
                break;
            case КодОперації.ЦиклическоеСложение:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.ЦиклічнеДодавання, команда);
                break;
            case КодОперації.УмножениеБезОкругления:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.МноженняБезСкругленням, команда);
                break;
            case КодОперації.УмножениеСОкруглением:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.Множення, команда);
                break;
            case КодОперації.Деление:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.Ділення, команда);
                break;
            case КодОперації.ЛогическийСдвиг:
                yield return new УмовнаОперація2(
                    new БінарнаОперація(ТипБінарноїОперації.МеншеЧиДорівнює,
                        ВідноснаПамять(команда.Адреса1),
                        new Константа(0)),
                    new ЗберіганняЗмінної(
                        ВідноснаПамять(команда.Адреса3),
                        new БінарнаОперація(ТипБінарноїОперації.СдвигВправо, ВідноснаПамять(команда.Адреса1), new УнарнаОперація(ТипУнарноїОперації.Модуль, ВідноснаПамять(команда.Адреса2)))),
                    new ЗберіганняЗмінної(
                        ВідноснаПамять(команда.Адреса3),
                        new БінарнаОперація(ТипБінарноїОперації.СдвигВліво, ВідноснаПамять(команда.Адреса1), ВідноснаПамять(команда.Адреса2))));
                break;
            case КодОперації.ЛогическоеСложение:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.ЛогічнеДодавання, команда);
                break;
            case КодОперації.ЛогическоеУмножение:
                yield return СтворитиБінарнуОперацію(ТипБінарноїОперації.ЛогічнеМноження, команда);
                break;
            case КодОперації.ТочноеСравнение:
                yield return new УмовнаОперація(
                    new БінарнаОперація(ТипБінарноїОперації.Дорівнює, ВідноснаПамять(команда.Адреса1), ВідноснаПамять(команда.Адреса2)),
                    new Перехід(команда.Адреса3));
                break;
            case КодОперації.ОперацияРавнозначно:
                yield return new ЗберіганняЗмінної(
                    ВідноснаПамять(команда.Адреса3),
                    new БінарнаОперація(ТипБінарноїОперації.ЛогічнеМноження, new УнарнаОперація(ТипУнарноїОперації.БітовеНі, СтворитиБінарнийВираз(ТипБінарноїОперації.ЛогічнаВиключнеАбо, команда)), new Число(ulong.MaxValue >> 23)));
                break;
            case КодОперації.ВводЧисел:
                yield return new ВвідЧисел(команда.Адреса1, команда.Адреса2);
                yield return new Перехід(команда.Адреса3);
                break;
            case КодОперації.ВводКоманд:
                yield return new ВвідКодів(команда.Адреса1, команда.Адреса2);
                yield return new Перехід(команда.Адреса3);
                break;
            case КодОперації.ВыводКодов:
                yield return new ВивідКодів(команда.Адреса1, команда.Адреса2);
                yield return new Перехід(команда.Адреса3);
                break;
            case КодОперації.ЗаписьНаМагнитныйБарабанКодовИзЯчеекЗапоминающегоУстройств:
                yield return new ЗаписатиКодаНаБарабан(команда.Адреса1, команда.Адреса2);
                yield return new Перехід(команда.Адреса3);
                break;
            case КодОперації.ЧтениеКодовСМагнитногоБарабанаВЯчейкиЗапоминающегоУстройства:
                yield return new ПрочитатиКодаІзБарабана(команда.Адреса1, команда.Адреса2);
                yield return new Перехід(команда.Адреса3);
                break;
            case КодОперації.ОбращениеКМагнитномуБарабану:
                yield return new ПідготуватиБарабан(команда.Адреса1, команда.Адреса2, команда.Адреса3);
                break;
            case КодОперації.НачалоГрупповойОперации:
                yield return new ЗберіганняЗмінної(
                    new Регістр(ТипРегістра.Ц),
                    ВідноснаАдреса(команда.Адреса1));
                yield return new ЗберіганняЗмінної(
                    new Регістр(ТипРегістра.А),
                    ВідноснаАдреса(команда.Адреса2));
                yield return new УмовнаОперація(
                    new БінарнаОперація(ТипБінарноїОперації.Дорівнює, new Регістр(ТипРегістра.Ц), new Регістр(ТипРегістра.А)),
                    new Перехід(команда.Адреса3));
                break;
            case КодОперації.ОкончаниеГрупповойОперации:
                yield return new ЗберіганняЗмінної(
                    new Регістр(ТипРегістра.А),
                    new БінарнаОперація(ТипБінарноїОперації.Додавання, new Регістр(ТипРегістра.А), ВідноснаПамять(команда.Адреса1)));
                yield return new УмовнаОперація(
                    new БінарнаОперація(ТипБінарноїОперації.Дорівнює, new Регістр(ТипРегістра.Ц), new Регістр(ТипРегістра.А)),
                    new Перехід(команда.Адреса3));
                yield return new Перехід(команда.Адреса2);
                break;
            case КодОперації.УсловныйПереходНаПодпрограмму:
                yield return new УмовнаОперація(
                    new БінарнаОперація(ТипБінарноїОперації.МеншеЧиДорівнює,
                        ВідноснаПамять(команда.Адреса1),
                        new Константа(0)),
                    new ДвіОперації(new ВстановитиТочкуПовернення(команда.Адреса2), new Перехід(команда.Адреса3)));
                break;
            case КодОперації.УсловныйПереходПоЗнакуЧисла:
                yield return new УмовнаОперація(
                    new БінарнаОперація(ТипБінарноїОперації.МеншеЧиДорівнює,
                        ВідноснаПамять(команда.Адреса1),
                        new Константа(0)),
                    new Перехід(команда.Адреса3));
                yield return new Перехід(команда.Адреса2);
                break;
            case КодОперації.ПереходПоРегиструВозврата:
                yield return new Повернутися();
                break;
            case КодОперації.ОстановМашины:
                yield return new Стоп();
                break;
            case КодОперації.ПереходПоФиксатору:
                yield return new ЗберіганняЗмінної(
                    new Регістр(ТипРегістра.А),
                    ВідноснаПамять(команда.Адреса1));
                yield return new ЗберіганняЗмінної(
                    ВідноснаПамять(команда.Адреса3),
                    new АдресаПамяти(new Регістр(ТипРегістра.А)));
                break;
            default:
                throw new NotSupportedException();
        }
    }

    private static Операція СтворитиБінарнуОперацію(ТипБінарноїОперації тип, СтруктураКоманди команда)
    {
        return new ЗберіганняЗмінної(
            ВідноснаПамять(команда.Адреса3),
            СтворитиБінарнийВираз(тип, команда));
    }

    private static Вираз СтворитиБінарнийВираз(ТипБінарноїОперації тип, СтруктураКоманди команда)
    {
        return new БінарнаОперація(тип, ВідноснаПамять(команда.Адреса1), ВідноснаПамять(команда.Адреса2));
    }

    private static Вираз ВідноснаАдреса(int адреса)
    {
        var базоваАдреса = адреса & 0x7FF;
        if ((адреса & (1 << 11)) != 0)
        {
            return new БінарнаОперація(ТипБінарноїОперації.Додавання, new Константа(базоваАдреса), new Регістр(ТипРегістра.А));
        }

        return new Константа(базоваАдреса);
    }

    private static Вираз ВідноснаПамять(int адреса)
    {
        return new АдресаПамяти(ВідноснаАдреса(адреса));
    }
}

abstract record Операція();
abstract record Вираз();
enum ТипУнарноїОперації
{
    Модуль,
    БітовеНі,
}
record УнарнаОперація(ТипУнарноїОперації Тип, Вираз Вираз) : Вираз
{
    public override string ToString()
    {
        switch (Тип)
        {
            case ТипУнарноїОперації.Модуль:
                return $"|{Вираз}|";
            case ТипУнарноїОперації.БітовеНі:
                return $"~({Вираз})";
            default:
                throw new NotImplementedException($"Невідомий тип унарної операції {Тип}");
    }
}
}
enum ТипБінарноїОперації
{
    Додавання,
    Віднімання,
    Множення,
    Ділення,
    ДодаванняКоманд,
    ЦиклічнеДодавання,
    МноженняБезСкругленням,

    Дорівнює,
    МеншеЧиДорівнює,

    ЛогічнеДодавання,
    ЛогічнеМноження,
    ЛогічнаВиключнеАбо,
    СдвигВправо,
    СдвигВліво,
}
record БінарнаОперація(ТипБінарноїОперації Тип, Вираз Вираз1, Вираз Вираз2): Вираз
{
    public override string ToString()
    {
        return $"{В(Вираз1)} {ТипОперації()} {В(Вираз2)}";
    }

    private static string В(Вираз вираз)
    {
        if (вираз is БінарнаОперація) return $"({вираз})";
        if (вираз is УнарнаОперація) return $"({вираз})";
        return $"{вираз}";
    }

    private string ТипОперації()
    {
        switch(Тип)
        {
            case ТипБінарноїОперації.Додавання:
                return "+";
            case ТипБінарноїОперації.Віднімання:
                return "-";
            case ТипБінарноїОперації.Множення:
                return "*";
            case ТипБінарноїОперації.Ділення:
                return "/";
            case ТипБінарноїОперації.МноженняБезСкругленням:
                return "|*|";
            case ТипБінарноїОперації.ДодаванняКоманд:
                return "ДодК";
            case ТипБінарноїОперації.ЦиклічнеДодавання:
                return "ДодЦ";

            case ТипБінарноїОперації.Дорівнює:
                return "==";
            case ТипБінарноїОперації.МеншеЧиДорівнює:
                return "<=";

            case ТипБінарноїОперації.ЛогічнеДодавання:
                return "|";
            case ТипБінарноїОперації.ЛогічнеМноження:
                return "&";
            case ТипБінарноїОперації.ЛогічнаВиключнеАбо:
                return "^";

            case ТипБінарноїОперації.СдвигВліво:
                return "<<";
            case ТипБінарноїОперації.СдвигВправо:
                return ">>";
            default:
                throw new NotImplementedException($"Невідомий тип бінарної операції {Тип}");
        }
    }
};
record ЗберіганняЗмінної(Вираз МісцеЗберігання, Вираз Що) : Операція
{
    public override string ToString()
    {
        return $"{МісцеЗберігання} = {Що};";
    }
};
record УмовнаОперація(Вираз Умова, Операція Що) : Операція
{
    public override string ToString()
    {
        return $"if ({Умова})\n{{\n    {Що}\n}}";
    }
};
record УмовнаОперація2(Вираз Умова, Операція Що, Операція Інакше) : Операція
{
    public override string ToString()
    {
        return $"if ({Умова})\n{{\n    {Що}\n}}\nelse{{\n   {Інакше}\n}}";
    }
};
record ДвіОперації(Операція Операція1, Операція Операція2) : Операція
{
    public override string ToString()
    {
        return $"{Операція1} {Операція2}";
    }
}
record Перехід(int адреса) : Операція
{
    public override string ToString()
    {
        return $"goto lbl_{До8РічноїАдреси(адреса)};";
    }
}
record Повернутися() : Операція
{
    public override string ToString()
    {
        return $"lngjmp;";
    }
};
record ВстановитиТочкуПовернення(int адреса) : Операція
{
    public override string ToString()
    {
        return $"setjmp {До8РічноїАдреси(адреса)};";
    }
}

record Константа(int значення) : Вираз
{
    public override string ToString()
    {
        return $"{До8РічноїАдреси(значення)}";
    }
};
record Число(ulong значення) : Вираз
{
    public override string ToString()
    {
        return $"0x{значення:X}";
    }
};
record АдресаПамяти(Вираз адреса) : Вираз
{
    public override string ToString()
    {
        if (адреса is Регістр)
        {
            return $"п[{адреса}]";
        }

        return $"п[{адреса}]";
    }
};
enum ТипРегістра
{
    С,
    К,
    Р,
    Ц,
    А,
}
record Регістр(ТипРегістра регістр) : Вираз
{
    public override string ToString()
    {
        return регістр.ToString();
    }
};
record ВвідЧисел(int від, int по) : Операція
{
    public override string ToString()
    {
        return $"inputNumbers({До8РічноїАдреси(від)}, {До8РічноїАдреси(по)})";
    }
};
record ВвідКодів(int від, int по) : Операція
{
    public override string ToString()
    {
        return $"inputCodes({До8РічноїАдреси(від)}, {До8РічноїАдреси(по)})";
    }
};

record ВивідКодів(int від, int по) : Операція
{
    public override string ToString()
    {
        return $"printCodes({До8РічноїАдреси(від)}, {До8РічноїАдреси(по)})";
    }
};
record ЗаписатиКодаНаБарабан(int від, int по) : Операція
{
    public override string ToString()
    {
        return $"writeCodesToReel({До8РічноїАдреси(від)}, {До8РічноїАдреси(по)})";
    }
};
record ПрочитатиКодаІзБарабана(int від, int по) : Операція
{
    public override string ToString()
    {
        return $"readCodesFromReel({До8РічноїАдреси(від)}, {До8РічноїАдреси(по)})";
    }
};
record ПідготуватиБарабан(int тип, int адреса, int барабан) : Операція
{
    public override string ToString()
    {
        return $"prepareReel({тип}, {адреса}, {барабан})";
    }
};
record Стоп() : Операція
{
    public override string ToString()
    {
        return "exit();";
    }
};