@page "/"
@using static Kyiv.Конвертер
@implements IDisposable
@inject ILogger<Головна> Logger
@inject МашинаКиїв Machine

<НазваСторінки>Головна</НазваСторінки>

<NavLink class="nav-link" href="disassembler">
    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Дізасемблер
</NavLink>
@* <h1>Hello, world!</h1>

<EditForm EditContext="контекстРедагування" OnValidSubmit="Відправити" FormName="Головна">
    <ВвідКоманди @bind-Value="Model!.Command" />
    <ValidationMessage For="() => Model!.Command" />
</EditForm> *@
<h3>Регистри</h3>
<label>C</label>
<ВвідРегістра @bind-Value="@Machine.РегістрС" />
<label>К</label>
@Machine.РегістрК
<label>Р</label>
@Machine.РегістрР
<label>Ц</label>
@Machine.РегістрЦ
<label>А</label>
<ВвідРегістра @bind-Value="@Machine.РегістрА" />

<div class="form-check">
    <InputCheckbox @bind-Value="Machine.АварійнаЗупинка" id="АварійнаЗупинка" />
    <label class="form-check-label" for="АварійнаЗупинка">
        Аварійна зупинка
    </label>
</div>

<div class="form-check">
    <InputCheckbox @bind-Value="Machine.ТумблерБлокировкиАварийногоОстанова" id="ТумблерБлокировкиАварийногоОстанова" />
    <label class="form-check-label" for="ТумблерБлокировкиАварийногоОстанова">
        Блокировка аварийної зупинки
    </label>
</div>

<button type="button" class="btn btn-primary" @onclick=Крок>Крок</button>

@code {
    private EditContext? контекстРедагування;

    [SupplyParameterFromForm]
    public СтруктураКоманди? Model { get; set; }

    private ValidationMessageStore? складПовідомлень;

    protected override void OnInitialized()
    {
        Model ??= new();
        контекстРедагування = new(Model);
        контекстРедагування.OnValidationRequested += ОбробитиВалідаціяЗапрошена;
        складПовідомлень = new(контекстРедагування);
    }

    private void ОбробитиВалідаціяЗапрошена(object? відправник, ValidationRequestedEventArgs арги)
    {
        складПовідомлень?.Clear();

        //if (Model!.Command.Any(_ => _ < '0' || _ > '7'))
        {
            //складПовідомлень?.Add(() => Model.Command, "Не 8-річне число.");
        }
    }

    private void Відправити()
    {
        Logger.LogInformation("Submit called: Processing the form");
    }

    private void Крок()
    {
        Machine.ВиконатиКоманду();
    }

    public class СтруктураКоманди
    {
        public bool Subsystem1 { get; set; }
        public bool Subsystem2 { get; set; }
        public bool Options => Subsystem1 || Subsystem2;

        private string команда = "";

        public string Command
        {
            get => команда;
            set => команда = value;
        }
    }

    public void Dispose()
    {
        if (контекстРедагування is not null)
        {
            контекстРедагування.OnValidationRequested -= ОбробитиВалідаціяЗапрошена;
        }
    }
}
