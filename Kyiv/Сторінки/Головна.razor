@page "/"
@using static Kyiv.Конвертер
@implements IDisposable
@inject ILogger<Головна> Logger
@inject МашинаКиїв Machine

<НазваСторінки>Головна</НазваСторінки>

<NavLink class="nav-link" href="disassembler">
    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Дізасемблер
</NavLink>
@* <h1>Hello, world!</h1>

<EditForm EditContext="контекстРедагування" OnValidSubmit="Відправити" FormName="Головна">
    <ВвідКоманди @bind-Value="Model!.Command" />
    <ValidationMessage For="() => Model!.Command" />
</EditForm> *@
<h3>Регистри</h3>
<label title="Регістр лікувальника команд">C</label>
<ВвідРегістра @bind-Value="@Machine.РегістрС" />
<label title="Регістр повернення">Р</label>
@Machine.РегістрР
<label title="Регістр закінчення циклу">Ц</label>
@Machine.РегістрЦ
<label title="Регістр лікувальних циклу">А</label>
<ВвідРегістра @bind-Value="@Machine.РегістрА" />

<div class="row">
    <div class="col">
        <label title="Регістр поточної команди">К</label>
        @ПарсерКоманд.Сконвертувати(Machine.РегістрК)
    </div>
</div>
<div class="row">
    <div class="col">
        @((MarkupString)Kyiv.Дізасемблер.Дізасемблювати(ПарсерКоманд.Сконвертувати(Machine.РегістрК)))
    </div>
</div>

<div class="form-check">
    <InputCheckbox @bind-Value="Machine.АварійнаЗупинка" id="АварійнаЗупинка" />
    <label class="form-check-label" for="АварійнаЗупинка">
        Аварійна зупинка
    </label>
</div>

<div class="form-check">
    <InputCheckbox @bind-Value="Machine.ТумблерБлокировкиАварийногоОстанова" id="ТумблерБлокировкиАварийногоОстанова" />
    <label class="form-check-label" for="ТумблерБлокировкиАварийногоОстанова">
        Блокировка аварийної зупинки
    </label>
</div>

<h3>Відомі адреси</h3>
<div class="row">
    <div class="col-1">
        <label>парам</label>
    </div>
    <div class="col-2">
        @Конвертер.ДоДвойноїТочності(Machine.АдресаПараметра)
    </div>
    <div class="col">
        @ПарсерКоманд.Сконвертувати(Machine.АдресаПараметра)
    </div>
</div>
<div class="row">
    <div class="col-1">
        <label>рез</label>
    </div>
    <div class="col-2">
        @Конвертер.ДоДвойноїТочності(Machine.АдресаРезультата)
    </div>
    <div class="col">
        @ПарсерКоманд.Сконвертувати(Machine.АдресаРезультата)
    </div>
</div>
<div class="row">
    <div class="col-1">
        <label>тимч1</label>
    </div>
    <div class="col-2">
        @Конвертер.ДоДвойноїТочності(Machine.АдресаТимчасовоїЗмінної1)
    </div>
    <div class="col">
        @ПарсерКоманд.Сконвертувати(Machine.АдресаТимчасовоїЗмінної1)
    </div>
</div>
<div class="row">
    <div class="col-1">
        <label>тимч2</label>
    </div>
    <div class="col-2">
        @Конвертер.ДоДвойноїТочності(Machine.АдресаТимчасовоїЗмінної2)
    </div>
    <div class="col">
        @ПарсерКоманд.Сконвертувати(Machine.АдресаТимчасовоїЗмінної2)
    </div>
</div>
<div class="row">
    <div class="col-1">
        <label>тимч3</label>
    </div>
    <div class="col-2">
        @Конвертер.ДоДвойноїТочності(Machine.АдресаТимчасовоїЗмінної3)
    </div>
    <div class="col">
        @ПарсерКоманд.Сконвертувати(Machine.АдресаТимчасовоїЗмінної3)
    </div>
</div>

<button type="button" class="btn btn-primary" @onclick=Крок>Крок</button>
<button type="button" class="btn btn-secondary" @onclick=ПротестуватиКорінь>sqrt(x)</button>
<button type="button" class="btn btn-secondary" @onclick=ПротестуватиКонвертацію>2 до 10</button>
<button type="button" class="btn btn-secondary" @onclick=ПротестуватиЕкспоненту>1/4 * e(x)</button>
<button type="button" class="btn btn-secondary" @onclick=ПротестуватиСінусВ1>1/2 * sinX (-1 &lt;x &lt; 1)</button>

@code {
    private EditContext? контекстРедагування;

    [SupplyParameterFromForm]
    public СтруктураКоманди? Model { get; set; }

    private ValidationMessageStore? складПовідомлень;

    protected override void OnInitialized()
    {
        Model ??= new();
        контекстРедагування = new(Model);
        контекстРедагування.OnValidationRequested += ОбробитиВалідаціяЗапрошена;
        складПовідомлень = new(контекстРедагування);
    }

    private void ОбробитиВалідаціяЗапрошена(object? відправник, ValidationRequestedEventArgs арги)
    {
        складПовідомлень?.Clear();

        //if (Model!.Command.Any(_ => _ < '0' || _ > '7'))
        {
            //складПовідомлень?.Add(() => Model.Command, "Не 8-річне число.");
        }
    }

    private void Відправити()
    {
        Logger.LogInformation("Submit called: Processing the form");
    }

    private void Крок()
    {
        Machine.ВиконатиКоманду();
    }

    private void ПротестуватиКорінь()
    {
        Machine.РегістрС = (ushort)Конвертер.Із8РічноїАдреси(3163);
        Machine.АдресаПараметра = 1UL << 38 /* 2^(-2) */;
    }

    private void ПротестуватиКонвертацію()
    {
        Machine.РегістрС = (ushort)Конвертер.Із8РічноїАдреси(3100);
        Machine.АдресаПараметра = 1UL << 38 /* 2^(-2) */;
    }

    private void ПротестуватиЕкспоненту()
    {
        Machine.РегістрС = (ushort)Конвертер.Із8РічноїАдреси(3202);
        Machine.АдресаПараметра = 0 /* 0 */;
        Machine.АдресаПараметра = ПарсерКоманд.Сконвертувати("17 7777 7777 7777") /* 1 */;
    }

    private void ПротестуватиСінусВ1()
    {
        Machine.РегістрС = (ushort)Конвертер.Із8РічноїАдреси(3152);
        Machine.АдресаПараметра = 0 /* 0 */;
        Machine.АдресаПараметра = ПарсерКоманд.Сконвертувати("17 7777 7777 7777") /* 1 */;
    }

    public class СтруктураКоманди
    {
        public bool Subsystem1 { get; set; }
        public bool Subsystem2 { get; set; }
        public bool Options => Subsystem1 || Subsystem2;

        private string команда = "";

        public string Command
        {
            get => команда;
            set => команда = value;
        }
    }

    public void Dispose()
    {
        if (контекстРедагування is not null)
        {
            контекстРедагування.OnValidationRequested -= ОбробитиВалідаціяЗапрошена;
        }
    }
}
