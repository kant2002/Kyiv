using System;
using System.Diagnostics;

namespace Kyiv;

public class МашинаКиїв
{
    /// <summary>
    /// счетчик команд
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрС;

    /// <summary>
    /// регистр команд
    /// </summary>
    /// <remarks>41-бітний</remarks>
    public ulong РегістрК;

    /// <summary>
    /// регистр возврата
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрР;

    /// <summary>
    /// регистр циклов 
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрЦ;

    /// <summary>
    /// регистра модификации адресов
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрА;

    /// <summary>
    /// регистр-триггер аварийного останова
    /// </summary>
    public bool АварійнаЗупинка;

    /// <summary>
    /// тумблер блокировки аварийного останова
    /// </summary>
    public bool ТумблерБлокировкиАварийногоОстанова;

    public ulong[] ОперативноеЗапоминающееУстройство = new ulong[1024];
    public ulong[] ПассивноеЗапоминающееУстройство = new ulong[512];
    public ulong[] ВнешняяПамять = new ulong[9864];
    private bool ФлагПереповнення;
    private const long МінімальнеНегативнеЧисло = -0x1_FFFFF_FFFFF;
    private const long МаксимальнеПозітивнеЧисло = 0xFFFFF_FFFFF;

    private int ВзятиВідноснуАдреса(int адреса)
    {
        if ((адреса & (1 << 11)) != 0)
        {
            return (адреса + РегістрА) % 2048;
        }

        return адреса;
    }

    public ulong ПрочитатиПамять(int адреса)
    {
        if (адреса == 0) return 0;

        if (адреса < 1024) return ОперативноеЗапоминающееУстройство[адреса];

        if (адреса < 2047) return ПассивноеЗапоминающееУстройство[адреса - 1536];
        if (адреса == 2047)
        {
            // Последняя ячейка пятого блока сменно-спаянной памяти (имеющая адрес 3777) используется для подсоединения датчика случайных чисел
            Debug.Assert(false, "Датчик випадкових чисел не реалізован");
        }

        Debug.Assert(false, $"Невідома адреса {адреса}");
        return 0;
    }

    public void ЗаписатиПамять(int адреса, ulong значення)
    {
        //адреса = адреса - 2048;
        if (адреса == 0)
        {
            // Последняя ячейка пятого блока сменно-спаянной памяти (имеющая адрес 3777) используется для подсоединения датчика случайных чисел
            Debug.Assert(false, "Значення 0 не можна міняти");
        }

        if (адреса < 1024)
        {
            ОперативноеЗапоминающееУстройство[адреса] = значення;
            return;
        }
        if (адреса < 2047)
        {
            ПассивноеЗапоминающееУстройство[адреса - 1536] = значення;
            return;
        }

        if (адреса == 2047)
        {
            // Последняя ячейка пятого блока сменно-спаянной памяти (имеющая адрес 3777) используется для подсоединения датчика случайных чисел
            Debug.Assert(false, "Датчик випадкових чисел не реалізован");
        }

        Debug.Assert(false, $"Невідома адреса {адреса}");
    }

    public void ВиконатиКоманду()
    {
        ВиконатиКоманду(ПарсерКоманд.Розібрати(РегістрК));
    }

    public void ВиконатиКоманду(СтруктураКоманди команда)
    {
        switch (команда.Код)
        {
            // ст. 55
            case КодОперації.Сложение:
                {
                    var значення1 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса1));
                    var значення2 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса2));
                    var значення = Додавання(значення1, значення2);
                    if (ФлагПереповнення)
                    {
                        if (АварійнаЗупинка && !ТумблерБлокировкиАварийногоОстанова)
                        {
                            Debug.Assert(false, $"Машина зупинена");
                        }
                        else
                        {
                            РегістрС += 2;
                        }
                    }
                    else
                    {
                        ЗаписатиПамять(ВзятиВідноснуАдреса(команда.Адреса3), значення);
                        РегістрС += 1;
                        РегістрК = ПрочитатиПамять(РегістрС);
                    }
                }
                break;
            // ст. 56
            case КодОперації.Вычитание:
                {
                    var значення1 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса1));
                    var значення2 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса2));
                    var значення = Віднімання(значення1, значення2);
                    if (ФлагПереповнення)
                    {
                        if (АварійнаЗупинка && !ТумблерБлокировкиАварийногоОстанова)
                        {
                            Debug.Assert(false, $"Машина зупинена");
                        }
                        else
                        {
                            РегістрС += 2;
                        }
                    }
                    else
                    {
                        ЗаписатиПамять(ВзятиВідноснуАдреса(команда.Адреса3), значення);
                        РегістрС += 1;
                        РегістрК = ПрочитатиПамять(РегістрС);
                    }
                }
                break;
            default:
                throw new NotImplementedException($"Команда {команда.Код} не реалізована");
        }    
    }

    private ulong Додавання(ulong значення1, ulong значення2)
    {
        var число = РозширитиЧисло(значення1) + РозширитиЧисло(значення2);
        ФлагПереповнення = МінімальнеНегативнеЧисло > число || число > МаксимальнеПозітивнеЧисло;
        var значення = ЗвузитиЧисло(число);
        return значення;
    }

    private ulong Віднімання(ulong значення1, ulong значення2)
    {
        var число = РозширитиЧисло(значення1) - РозширитиЧисло(значення2);
        ФлагПереповнення = МінімальнеНегативнеЧисло > число || число > МаксимальнеПозітивнеЧисло;            
        var значення = ЗвузитиЧисло(число);
        return значення;
    }

    // сторінка 7 та 17
    // кожне число SA1A2A3....A40 це поліном S * (A1*2^-1 + A2*2^-2 + A3*2^-3 + ... +  + A40*2^-40)                                                  
    private static long РозширитиЧисло(ulong значення)
    {
        var модуль = значення & (ulong.MaxValue >> 23);
        if (ЄЗнак(значення)) return -unchecked((long)модуль);

        return unchecked((long)модуль);
    }

    private static ulong ЗвузитиЧисло(long значення)
    {
        if (значення > 0) return unchecked((ulong)значення);

        return unchecked((ulong)-значення) | (1UL << 40);
    }

    public static bool ЄЗнак(ulong значення) => (значення & (1UL << 40)) != 0;

    public static bool ЄПереповнення(ulong значення)
    {
        if ((значення & (1UL << 41)) != 0)
        {
            return true;
        }

        if ((значення & (1UL << 41)) != 0)
        {
            return true;
        }

        return false;
    }
}
