using System;
using System.Diagnostics;

namespace Kyiv;

public class МашинаКиїв
{
    /// <summary>
    /// счетчик команд
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрС;

    /// <summary>
    /// регистр команд
    /// </summary>
    /// <remarks>41-бітний</remarks>
    public ulong РегістрК;

    /// <summary>
    /// регистр возврата
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрР;

    /// <summary>
    /// регистр циклов 
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрЦ;

    /// <summary>
    /// регистра модификации адресов
    /// </summary>
    /// <remarks>11-бітний</remarks>
    public ushort РегістрА;

    /// <summary>
    /// регистр-триггер аварийного останова
    /// </summary>
    public bool АварійнаЗупинка;

    /// <summary>
    /// тумблер блокировки аварийного останова
    /// </summary>
    public bool ТумблерБлокировкиАварийногоОстанова;

    public ulong[] ОперативноеЗапоминающееУстройство = new ulong[1024];
    public ulong[] ПассивноеЗапоминающееУстройство = new ulong[512];
    public ulong[] ВнешняяПамять = new ulong[9864];
    private bool ФлагПереповнення;
    private const long МінімальнеНегативнеЧисло = -0x1_FFFFF_FFFFF;
    private const long МаксимальнеПозітивнеЧисло = 0xFFFFF_FFFFF;

    public МашинаКиїв()
    {
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(10)] = ПарсерКоманд.Сконвертувати("00 0001 0000 0000"); // 2^-16
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(11)] = ПарсерКоманд.Сконвертувати("00 0000 0001 0000"); // 2^-28
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(12)] = ПарсерКоманд.Сконвертувати("00 0000 0000 0001"); // 2^-40
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(13)] = ПарсерКоманд.Сконвертувати("00 0001 0001 0001");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(14)] = ПарсерКоманд.Сконвертувати("00 0001 0001 0000");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(15)] = ПарсерКоманд.Сконвертувати("00 0000 0001 0001");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(16)] = ПарсерКоманд.Сконвертувати("00 0001 0000 0001");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(17)] = ПарсерКоманд.Сконвертувати("00 0002 0000 0000"); // 2^-15

        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(20)] = ПарсерКоманд.Сконвертувати("00 0000 0002 0000"); // 2^-27
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(21)] = ПарсерКоманд.Сконвертувати("00 0000 0000 0002"); // 2^-39
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(22)] = ПарсерКоманд.Сконвертувати("00 7777 0000 0000");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(23)] = ПарсерКоманд.Сконвертувати("00 0000 7777 0000");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(24)] = ПарсерКоманд.Сконвертувати("00 0000 0000 7777");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(25)] = ПарсерКоманд.Сконвертувати("37 0000 0000 0000"); // -15/16
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(26)] = ПарсерКоманд.Сконвертувати("20 0000 0000 0000"); // -0
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(27)] = ПарсерКоманд.Сконвертувати("37 0000 7777 7777");

        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(30)] = ПарсерКоманд.Сконвертувати("00 7777 7777 7777");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(31)] = ПарсерКоманд.Сконвертувати("37 7777 0000 7777");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(32)] = ПарсерКоманд.Сконвертувати("37 7777 7777 0000");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(33)] = ПарсерКоманд.Сконвертувати("00 7777 0000 7777");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(34)] = ПарсерКоманд.Сконвертувати("00 0000 7777 7777");
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(35)] = ПарсерКоманд.Сконвертувати("17 7777 7777 7777"); // Машинна одиниця 1-2^-40
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(36)] = ПарсерКоманд.Сконвертувати("37 7777 7777 7777"); // -(1-2^-40)
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(37)] = ПарсерКоманд.Сконвертувати("04 6420 2324 1220"); // lg2

        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(40)] = ПарсерКоманд.Сконвертувати("00 0020 0000 0000"); // 2^-12
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(41)] = ПарсерКоманд.Сконвертувати("00 0000 0020 0000"); // 2^-24
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(42)] = ПарсерКоманд.Сконвертувати("10 0000 0000 0000"); // 2^-1
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(43)] = ПарсерКоманд.Сконвертувати("04 0000 0000 0000"); // 2^-2
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(44)] = ПарсерКоманд.Сконвертувати("02 0000 0000 0000"); // 2^-3
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(45)] = ПарсерКоманд.Сконвертувати("01 0000 0000 0000"); // 2^-4
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(46)] = ПарсерКоманд.Сконвертувати("00 2000 0000 0000"); // 2^-6
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(47)] = ПарсерКоманд.Сконвертувати("00 0000 0000 0020"); // 2^-36

        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(50)] = ПарсерКоманд.Сконвертувати("12 0000 0000 0000"); // 10/16
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(51)] = ПарсерКоманд.Сконвертувати("13 0562 0577 3722"); // ln2
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(52)] = ПарсерКоманд.Сконвертувати("01 4631 4631 4632"); // 0,1
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(53)] = ПарсерКоманд.Сконвертувати("00 1217 2702 4366"); // 0,01
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(54)] = ПарсерКоманд.Сконвертувати("00 0101 4223 3514"); // 0,001
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(55)] = ПарсерКоманд.Сконвертувати("03 1463 1463 1463"); // 0,2 = 1/5
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(56)] = ПарсерКоманд.Сконвертувати("04 6314 6314 6315"); // 0,3
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(57)] = ПарсерКоманд.Сконвертувати("14 6314 6314 6315"); // 0,8 = 4/5

        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(60)] = ПарсерКоманд.Сконвертувати("00 0203 0446 7230"); // 0,002 = 1/500
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(61)] = ПарсерКоманд.Сконвертувати("02 4365 6050 7534"); // 0,16 = 4/25
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(62)] = ПарсерКоманд.Сконвертувати("05 0753 4121 7270"); // 0,32
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(63)] = ПарсерКоманд.Сконвертувати("05 0574 6033 3447"); // 1/π
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(64)] = ПарсерКоманд.Сконвертувати("11 0156 5650 1025"); // 1/sqrt(π)
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(65)] = ПарсерКоманд.Сконвертувати("05 7055 2615 4264"); // 1/e
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(66)] = ПарсерКоманд.Сконвертувати("14 4417 6652 1042"); // π/4
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(67)] = ПарсерКоманд.Сконвертувати("12 1371 4066 7116"); // 2/π

        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(70)] = ПарсерКоманд.Сконвертувати("13 2404 7463 1772"); // sqrt(2)/2
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(71)] = ПарсерКоманд.Сконвертувати("11 1715 1642 6202"); // 1/sqrt(3)
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(72)] = ПарсерКоманд.Сконвертувати("16 3765 6134 5604"); // e/3
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(73)] = ПарсерКоманд.Сконвертувати("06 3041 0514 7521"); // 1/sqrt(2π)
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(74)] = ПарсерКоманд.Сконвертувати("12 6770 2505 4243"); // e/4
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(75)] = ПарсерКоманд.Сконвертувати("05 2525 2525 2525"); // 1/3
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(76)] = ПарсерКоманд.Сконвертувати("01 4760 1366 1043"); // 1/π^2
        ПассивноеЗапоминающееУстройство[Із8РічноїАдреси(77)] = ПарсерКоманд.Сконвертувати("06 7455 7305 2237"); // М = log10(е)
    }

    private int ВзятиВідноснуАдреса(int адреса)
    {
        if ((адреса & (1 << 11)) != 0)
        {
            return (адреса + РегістрА) % 2048;
        }

        return адреса;
    }

    public ulong ПрочитатиПамять(int адреса)
    {
        if (адреса == 0) return 0;

        if (адреса < 1024) return ОперативноеЗапоминающееУстройство[адреса];

        if (адреса < 2047) return ПассивноеЗапоминающееУстройство[адреса - 1536];
        if (адреса == 2047)
        {
            // Последняя ячейка пятого блока сменно-спаянной памяти (имеющая адрес 3777) используется для подсоединения датчика случайных чисел
            Debug.Assert(false, "Датчик випадкових чисел не реалізован");
        }

        Debug.Assert(false, $"Невідома адреса {адреса}");
        return 0;
    }

    public void ЗаписатиПамять(int адреса, ulong значення)
    {
        //адреса = адреса - 2048;
        if (адреса == 0)
        {
            // Последняя ячейка пятого блока сменно-спаянной памяти (имеющая адрес 3777) используется для подсоединения датчика случайных чисел
            Debug.Assert(false, "Значення 0 не можна міняти");
        }

        if (адреса < 1024)
        {
            ОперативноеЗапоминающееУстройство[адреса] = значення;
            return;
        }
        if (адреса < 2047)
        {
            ПассивноеЗапоминающееУстройство[адреса - 1536] = значення;
            return;
        }

        if (адреса == 2047)
        {
            // Последняя ячейка пятого блока сменно-спаянной памяти (имеющая адрес 3777) используется для подсоединения датчика случайных чисел
            Debug.Assert(false, "Датчик випадкових чисел не реалізован");
        }

        Debug.Assert(false, $"Невідома адреса {адреса}");
    }

    public void ВиконатиКоманду()
    {
        ВиконатиКоманду(ПарсерКоманд.Розібрати(РегістрК));
    }

    public void ВиконатиКоманду(СтруктураКоманди команда)
    {
        switch (команда.Код)
        {
            // ст. 55
            case КодОперації.Сложение:
                {
                    var значення1 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса1));
                    var значення2 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса2));
                    var значення = Додавання(значення1, значення2);
                    if (ФлагПереповнення)
                    {
                        if (АварійнаЗупинка && !ТумблерБлокировкиАварийногоОстанова)
                        {
                            Debug.Assert(false, $"Машина зупинена");
                        }
                        else
                        {
                            РегістрС += 2;
                        }
                    }
                    else
                    {
                        ЗаписатиПамять(ВзятиВідноснуАдреса(команда.Адреса3), значення);
                        РегістрС += 1;
                        РегістрК = ПрочитатиПамять(РегістрС);
                    }
                }
                break;
            // ст. 56
            case КодОперації.Вычитание:
                {
                    var значення1 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса1));
                    var значення2 = ПрочитатиПамять(ВзятиВідноснуАдреса(команда.Адреса2));
                    var значення = Віднімання(значення1, значення2);
                    if (ФлагПереповнення)
                    {
                        if (АварійнаЗупинка && !ТумблерБлокировкиАварийногоОстанова)
                        {
                            Debug.Assert(false, $"Машина зупинена");
                        }
                        else
                        {
                            РегістрС += 2;
                        }
                    }
                    else
                    {
                        ЗаписатиПамять(ВзятиВідноснуАдреса(команда.Адреса3), значення);
                        РегістрС += 1;
                        РегістрК = ПрочитатиПамять(РегістрС);
                    }
                }
                break;
            default:
                throw new NotImplementedException($"Команда {команда.Код} не реалізована");
        }    
    }

    private ulong Додавання(ulong значення1, ulong значення2)
    {
        var число = РозширитиЧисло(значення1) + РозширитиЧисло(значення2);
        ФлагПереповнення = МінімальнеНегативнеЧисло > число || число > МаксимальнеПозітивнеЧисло;
        var значення = ЗвузитиЧисло(число);
        return значення;
    }

    private ulong Віднімання(ulong значення1, ulong значення2)
    {
        var число = РозширитиЧисло(значення1) - РозширитиЧисло(значення2);
        ФлагПереповнення = МінімальнеНегативнеЧисло > число || число > МаксимальнеПозітивнеЧисло;            
        var значення = ЗвузитиЧисло(число);
        return значення;
    }

    // сторінка 7 та 17
    // кожне число SA1A2A3....A40 це поліном S * (A1*2^-1 + A2*2^-2 + A3*2^-3 + ... +  + A40*2^-40)                                                  
    private static long РозширитиЧисло(ulong значення)
    {
        var модуль = значення & (ulong.MaxValue >> 23);
        if (ЄЗнак(значення)) return -unchecked((long)модуль);

        return unchecked((long)модуль);
    }

    private static ulong ЗвузитиЧисло(long значення)
    {
        if (значення > 0) return unchecked((ulong)значення);

        return unchecked((ulong)-значення) | (1UL << 40);
    }

    public static bool ЄЗнак(ulong значення) => (значення & (1UL << 40)) != 0;

    public static bool ЄПереповнення(ulong значення)
    {
        if ((значення & (1UL << 41)) != 0)
        {
            return true;
        }

        if ((значення & (1UL << 41)) != 0)
        {
            return true;
        }

        return false;
    }

    private static int Із8РічноїАдреси(int ячейка) => (ячейка / 1000) * 8 * 8 * 8 + (ячейка % 1000 / 100) * 8 * 8 + (ячейка % 100 / 10) * 8 + ячейка % 10;
}
