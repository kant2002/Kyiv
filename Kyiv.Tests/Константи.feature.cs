// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kyiv.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class КонстантиУМашиніFeature : object, Xunit.IClassFixture<КонстантиУМашиніFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("uk"), "", "Константи у машині", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Константи.feature"
#line hidden
        
        public КонстантиУМашиніFeature(КонстантиУМашиніFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Постоянно-спаянные константы")]
        [Xunit.TraitAttribute("FeatureTitle", "Константи у машині")]
        [Xunit.TraitAttribute("Description", "Постоянно-спаянные константы")]
        [Xunit.InlineDataAttribute("3010", "\'00 0001 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3011", "\'00 0000 0001 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3012", "\'00 0000 0000 0001\'", new string[0])]
        [Xunit.InlineDataAttribute("3013", "\'00 0001 0001 0001\'", new string[0])]
        [Xunit.InlineDataAttribute("3014", "\'00 0001 0001 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3015", "\'00 0000 0001 0001\'", new string[0])]
        [Xunit.InlineDataAttribute("3016", "\'00 0001 0000 0001\'", new string[0])]
        [Xunit.InlineDataAttribute("3017", "\'00 0002 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3020", "\'00 0000 0002 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3021", "\'00 0000 0000 0002\'", new string[0])]
        [Xunit.InlineDataAttribute("3022", "\'00 7777 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3023", "\'00 0000 7777 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3024", "\'00 0000 0000 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3025", "\'37 0000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3026", "\'20 0000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3027", "\'37 0000 7777 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3030", "\'00 7777 7777 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3031", "\'37 7777 0000 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3032", "\'37 7777 7777 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3033", "\'00 7777 0000 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3034", "\'00 0000 7777 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3035", "\'17 7777 7777 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3036", "\'37 7777 7777 7777\'", new string[0])]
        [Xunit.InlineDataAttribute("3037", "\'04 6420 2324 1220\'", new string[0])]
        [Xunit.InlineDataAttribute("3040", "\'00 0020 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3041", "\'00 0000 0020 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3042", "\'10 0000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3043", "\'04 0000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3044", "\'02 0000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3045", "\'01 0000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3046", "\'00 2000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3047", "\'00 0000 0000 0020\'", new string[0])]
        [Xunit.InlineDataAttribute("3050", "\'12 0000 0000 0000\'", new string[0])]
        [Xunit.InlineDataAttribute("3051", "\'13 0562 0577 3722\'", new string[0])]
        [Xunit.InlineDataAttribute("3052", "\'01 4631 4631 4632\'", new string[0])]
        [Xunit.InlineDataAttribute("3053", "\'00 1217 2702 4366\'", new string[0])]
        [Xunit.InlineDataAttribute("3054", "\'00 0101 4223 3514\'", new string[0])]
        [Xunit.InlineDataAttribute("3055", "\'03 1463 1463 1463\'", new string[0])]
        [Xunit.InlineDataAttribute("3056", "\'04 6314 6314 6315\'", new string[0])]
        [Xunit.InlineDataAttribute("3057", "\'14 6314 6314 6315\'", new string[0])]
        [Xunit.InlineDataAttribute("3060", "\'00 0203 0446 7230\'", new string[0])]
        [Xunit.InlineDataAttribute("3061", "\'02 4365 6050 7534\'", new string[0])]
        [Xunit.InlineDataAttribute("3062", "\'05 0753 4121 7270\'", new string[0])]
        [Xunit.InlineDataAttribute("3063", "\'05 0574 6033 3447\'", new string[0])]
        [Xunit.InlineDataAttribute("3064", "\'11 0156 5650 1025\'", new string[0])]
        [Xunit.InlineDataAttribute("3065", "\'05 7055 2615 4264\'", new string[0])]
        [Xunit.InlineDataAttribute("3066", "\'14 4417 6652 1042\'", new string[0])]
        [Xunit.InlineDataAttribute("3067", "\'12 1371 4066 7116\'", new string[0])]
        [Xunit.InlineDataAttribute("3070", "\'13 2404 7463 1772\'", new string[0])]
        [Xunit.InlineDataAttribute("3071", "\'11 1715 1642 6202\'", new string[0])]
        [Xunit.InlineDataAttribute("3072", "\'16 3765 6134 5604\'", new string[0])]
        [Xunit.InlineDataAttribute("3073", "\'06 3041 0514 7521\'", new string[0])]
        [Xunit.InlineDataAttribute("3074", "\'12 6770 2505 4243\'", new string[0])]
        [Xunit.InlineDataAttribute("3075", "\'05 2525 2525 2525\'", new string[0])]
        [Xunit.InlineDataAttribute("3076", "\'01 4760 1366 1043\'", new string[0])]
        [Xunit.InlineDataAttribute("3077", "\'06 7455 7305 2237\'", new string[0])]
        public async System.Threading.Tasks.Task Постоянно_СпаянныеКонстанты(string ячейка, string код, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ячейка", ячейка);
            argumentsOfScenario.Add("код", код);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Постоянно-спаянные константы", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
 await testRunner.ThenAsync(string.Format("ячейка {0} містить команду {1}", ячейка, код), ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await КонстантиУМашиніFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await КонстантиУМашиніFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
