// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kyiv.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ПорівнянняFeature : object, Xunit.IClassFixture<ПорівнянняFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Переходи.feature"
#line hidden
        
        public ПорівнянняFeature(ПорівнянняFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("uk"), "", "Порівняння", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Порівняння без знака")]
        [Xunit.TraitAttribute("FeatureTitle", "Порівняння")]
        [Xunit.TraitAttribute("Description", "Порівняння без знака")]
        [Xunit.InlineDataAttribute("\'00 0000 0000 1100\'", "\'00 0000 0000 0300\'", "101", new string[0])]
        [Xunit.InlineDataAttribute("\'00 0000 0000 0100\'", "\'00 0000 0000 0300\'", "2", new string[0])]
        [Xunit.InlineDataAttribute("\'00 0000 0000 0100\'", "\'00 0000 0000 0100\'", "2", new string[0])]
        [Xunit.InlineDataAttribute("\'00 0000 0000 0100\'", "\'70 0000 0000 0100\'", "2", new string[0])]
        public async System.Threading.Tasks.Task ПорівнянняБезЗнака(string значення1, string значення2, string лічільник, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("значення1", значення1);
            argumentsOfScenario.Add("значення2", значення2);
            argumentsOfScenario.Add("лічільник", лічільник);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Порівняння без знака", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
 await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 5
 await testRunner.AndAsync(string.Format("ячейка 5 містить команду {0}", значення1), ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 6
 await testRunner.AndAsync(string.Format("ячейка 18 містить команду {0}", значення2), ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
#line 7
 await testRunner.AndAsync("ячейка 100 містить команду \'05 0005 0022 0002\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 8
 await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 9
 await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 10
 await testRunner.ThenAsync(string.Format("лічільник команд містить {0}", лічільник), ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Перехід по регістру повернення")]
        [Xunit.TraitAttribute("FeatureTitle", "Порівняння")]
        [Xunit.TraitAttribute("Description", "Перехід по регістру повернення")]
        public async System.Threading.Tasks.Task ПерехідПоРегіструПовернення()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Перехід по регістру повернення", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
 await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 21
 await testRunner.AndAsync("регістр повернення містить 18", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 22
 await testRunner.AndAsync("ячейка 18 містить команду \'05 0005 0022 0002\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
#line 23
 await testRunner.AndAsync("ячейка 100 містить команду \'32 0000 0000 0000\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 24
 await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 25
 await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 26
 await testRunner.ThenAsync("лічільник команд містить 18", ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
#line 27
 await testRunner.AndAsync("регістр повернення містить 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Початок групової команди")]
        [Xunit.TraitAttribute("FeatureTitle", "Порівняння")]
        [Xunit.TraitAttribute("Description", "Початок групової команди")]
        [Xunit.InlineDataAttribute("\'26 0005 0022 0002\'", "18", "101", new string[0])]
        [Xunit.InlineDataAttribute("\'26 0005 0005 0002\'", "5", "2", new string[0])]
        public async System.Threading.Tasks.Task ПочатокГруповоїКоманди(string значення1, string регістрМодіфікаціїАдреси, string лічільник, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("значення1", значення1);
            argumentsOfScenario.Add("регістр модіфікації адреси", регістрМодіфікаціїАдреси);
            argumentsOfScenario.Add("лічільник", лічільник);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Початок групової команди", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
 await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 31
 await testRunner.AndAsync("ячейка 2 містить команду \'32 0015 0012 0002\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
#line 32
 await testRunner.AndAsync(string.Format("ячейка 100 містить команду {0}", значення1), ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 33
 await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 34
 await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 35
 await testRunner.ThenAsync(string.Format("лічільник команд містить {0}", лічільник), ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
#line 36
 await testRunner.AndAsync("регістр циклу містить 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 37
 await testRunner.AndAsync(string.Format("регістр модифікації адрес містить {0}", регістрМодіфікаціїАдреси), ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Кінець групової команди")]
        [Xunit.TraitAttribute("FeatureTitle", "Порівняння")]
        [Xunit.TraitAttribute("Description", "Кінець групової команди")]
        [Xunit.InlineDataAttribute("\'27 0001 0022 0002\'", "6", "18", new string[0])]
        [Xunit.InlineDataAttribute("\'27 0005 0022 0002\'", "10", "2", new string[0])]
        [Xunit.InlineDataAttribute("\'27 4001 0022 0002\'", "6", "18", new string[0])]
        public async System.Threading.Tasks.Task КінецьГруповоїКоманди(string значення1, string регістрМодіфікаціїАдреси, string лічільник, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("значення1", значення1);
            argumentsOfScenario.Add("регістр модіфікації адреси", регістрМодіфікаціїАдреси);
            argumentsOfScenario.Add("лічільник", лічільник);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Кінець групової команди", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 45
 await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 46
 await testRunner.AndAsync("регістр циклу містить 10", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 47
 await testRunner.AndAsync("регістр модифікації адрес містить 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 48
 await testRunner.AndAsync(string.Format("ячейка 100 містить команду {0}", значення1), ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 49
 await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 50
 await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 51
 await testRunner.ThenAsync(string.Format("лічільник команд містить {0}", лічільник), ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
#line 52
 await testRunner.AndAsync("регістр циклу містить 10", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 53
 await testRunner.AndAsync(string.Format("регістр модифікації адрес містить {0}", регістрМодіфікаціїАдреси), ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ПорівнянняFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ПорівнянняFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
