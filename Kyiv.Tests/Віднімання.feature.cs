// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kyiv.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ОпераціяВідніманняFeature : object, Xunit.IClassFixture<ОпераціяВідніманняFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("uk"), "", "Операція віднімання", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Віднімання.feature"
#line hidden
        
        public ОпераціяВідніманняFeature(ОпераціяВідніманняFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Звичайне віднімання")]
        [Xunit.TraitAttribute("FeatureTitle", "Операція віднімання")]
        [Xunit.TraitAttribute("Description", "Звичайне віднімання")]
        public async System.Threading.Tasks.Task ЗвичайнеВіднімання()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Звичайне віднімання", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
  await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 5
  await testRunner.AndAsync("ячейка 5 містить 300", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 6
  await testRunner.AndAsync("ячейка 18 містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
#line 7
  await testRunner.AndAsync("ячейка 100 містить команду \'02 0005 0022 0002\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 8
  await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 9
  await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 10
  await testRunner.ThenAsync("ячейка 2 містить 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
#line 11
  await testRunner.AndAsync("лічільник команд містить 101", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Звичайне віднімання 2")]
        [Xunit.TraitAttribute("FeatureTitle", "Операція віднімання")]
        [Xunit.TraitAttribute("Description", "Звичайне віднімання 2")]
        public async System.Threading.Tasks.Task ЗвичайнеВіднімання2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Звичайне віднімання 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 14
  await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 15
  await testRunner.AndAsync("ячейка 5 містить -300", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 16
  await testRunner.AndAsync("ячейка 18 містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
#line 17
  await testRunner.AndAsync("ячейка 100 містить команду \'02 0005 0022 0002\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 18
  await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 19
  await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 20
  await testRunner.ThenAsync("ячейка 2 містить -400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
#line 21
  await testRunner.AndAsync("лічільник команд містить 101", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Віднімання із переповненням")]
        [Xunit.TraitAttribute("FeatureTitle", "Операція віднімання")]
        [Xunit.TraitAttribute("Description", "Віднімання із переповненням")]
        public async System.Threading.Tasks.Task ВідніманняІзПереповненням()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Віднімання із переповненням", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
  await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 25
  await testRunner.AndAsync("ячейка 5 містить мінімальне негативне число", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 26
  await testRunner.AndAsync("ячейка 18 містить максимальне позітивне число", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
#line 27
  await testRunner.AndAsync("ячейка 100 містить команду \'02 0005 0022 0002\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 28
  await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 29
  await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 30
  await testRunner.ThenAsync("лічільник команд містить 102", ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Віднімання із переповненням і аварійною зупинкою")]
        [Xunit.TraitAttribute("FeatureTitle", "Операція віднімання")]
        [Xunit.TraitAttribute("Description", "Віднімання із переповненням і аварійною зупинкою")]
        public async System.Threading.Tasks.Task ВідніманняІзПереповненнямІАварійноюЗупинкою()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Віднімання із переповненням і аварійною зупинкою", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
  await testRunner.GivenAsync("пам\'ять заповнена значенями 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Дано ");
#line hidden
#line 34
  await testRunner.AndAsync("ячейка 5 містить мінімальне негативне число", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 35
  await testRunner.AndAsync("ячейка 18 містить максимальне позітивне число", ((string)(null)), ((global::Reqnroll.Table)(null)), "А також ");
#line hidden
#line 36
  await testRunner.AndAsync("ячейка 100 містить команду \'02 0005 0022 0002\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 37
  await testRunner.AndAsync("регістр лічільник команд містить 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 38
  await testRunner.AndAsync("аварійна зупинка включена", ((string)(null)), ((global::Reqnroll.Table)(null)), "І ");
#line hidden
#line 39
  await testRunner.WhenAsync("виконати команді", ((string)(null)), ((global::Reqnroll.Table)(null)), "Якщо ");
#line hidden
#line 40
  await testRunner.ThenAsync("лічільник команд містить 102", ((string)(null)), ((global::Reqnroll.Table)(null)), "Тоді ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ОпераціяВідніманняFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ОпераціяВідніманняFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
